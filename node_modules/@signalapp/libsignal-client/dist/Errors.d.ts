import { ProtocolAddress } from './Address';
import * as Native from '../Native';
export declare enum ErrorCode {
    Generic = 0,
    DuplicatedMessage = 1,
    SealedSenderSelfSend = 2,
    UntrustedIdentity = 3,
    InvalidRegistrationId = 4,
    VerificationFailed = 5,
    InvalidSession = 6,
    InvalidSenderKeySession = 7
}
export declare class LibSignalErrorBase extends Error {
    readonly code: ErrorCode;
    readonly operation: string;
    readonly _addr?: string | Native.ProtocolAddress;
    constructor(message: string, name: keyof typeof ErrorCode | undefined, operation: string, extraProps?: Record<string, unknown>);
    get addr(): ProtocolAddress | string;
}
export declare type LibSignalErrorCommon = Omit<LibSignalErrorBase, 'addr'>;
export declare type GenericError = LibSignalErrorCommon & {
    code: ErrorCode.Generic;
};
export declare type DuplicatedMessageError = LibSignalErrorCommon & {
    code: ErrorCode.DuplicatedMessage;
};
export declare type SealedSenderSelfSendError = LibSignalErrorCommon & {
    code: ErrorCode.SealedSenderSelfSend;
};
export declare type UntrustedIdentityError = LibSignalErrorCommon & {
    code: ErrorCode.UntrustedIdentity;
    addr: string;
};
export declare type InvalidRegistrationIdError = LibSignalErrorCommon & {
    code: ErrorCode.InvalidRegistrationId;
    addr: ProtocolAddress;
};
export declare type VerificationFailedError = LibSignalErrorCommon & {
    code: ErrorCode.VerificationFailed;
};
export declare type InvalidSessionError = LibSignalErrorCommon & {
    code: ErrorCode.InvalidSession;
};
export declare type InvalidSenderKeySessionError = LibSignalErrorCommon & {
    code: ErrorCode.InvalidSenderKeySession;
    distributionId: string;
};
export declare type LibSignalError = GenericError | DuplicatedMessageError | SealedSenderSelfSendError | UntrustedIdentityError | InvalidRegistrationIdError | VerificationFailedError | InvalidSessionError | InvalidSenderKeySessionError;
